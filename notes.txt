1. Создаем проект с помощью команды cargo new static-server. Эта команда сформерует корневую директорию проекта,
где будут располагаться Cargo.toml, src и так далее. 

2. Сразу загрузим его в GitHub. Перейдем в свой профиль на GitHub и создадим новый репазиторий. 
Введем следующие команды, находясь в корневой директории:
git init
git add .
git commit -m "commit"
git remote add origin git@github.com:NAME/NAME_REPOSITORY.git (ссылку можно скопировать в GitHub)
git branch -M main (переименовываем с master на main)
git push -u origin main
После этого мы должны видеть проект на GitHub

3. Добавим зависимости в Cargo.toml. Нам потребуется HTTP-фреймворк axum, tokio для асинхронности и tower-http.
В разделе [dependencies] введем:
axum = "0.8.4"
tokio = { version = "1.47.0", features = ["full"] }
tower-http = { version = "0.6.6", features = ["fs"] } 
Крейты в Rust спроектированы так, чтобы включать только необходимую функциональность. Именно поэтому мы указали
features для tokio и tower-http. Чтобы использовать дополнительные функции. Например, если мы укажем tokio без 
features, то получим только rt (базовый однопоточный рантайм) и sync (примитивы синхорнизации). Но для данного
проекта понадобятся: rt-multi-thread (Многопоточный runtime), fs (Файловая система), net (Сетевые возможности)
и macros (Макросы). Если все это не указать (не добавить features = full), но попытаться использовать в коде, то
код просто не скомпилируется. Но и перечислять все компоненты не удобно, поэтому проще просто использовать "full".
Это сделано с той целью, чтобы оптимизировать размер, а также уменьшить время компиляции. 

4. Определим структуру проекта. Для начала создадим стстаические файлы, которые и будете передавать наш 
http-сервер. Создадим папку static в корне проекта и поместим туда один html файл (пока этого хватит).
Вся логика же будет в файле main.rs. Структура данного файла:
    a. Импорт необходимх модулей
    b. Главная асинхронная функция main
    c. Настройка сервиса статических файлов 
    d. Создание маршрутизатора 
    e. Запуск сервера 
    f. Обработка graceful shutdown
